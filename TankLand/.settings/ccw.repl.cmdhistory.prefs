=\=\=\=\=\=\=
<<<<<<<=HEAD
>>>>>>>=refs/remotes/origin/calvins-code
<<<<<<< HEAD
cmdhistory=["(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(add-tank \\"Bob\\")" "(add-tank \\"John\\")" "(add-tank \\"Poe\\")" "(run \\"hi\\")" "(add-tank \\"Poe\\")" "(add-tank \\"John\\")" "(add-tank \\"Joe\\")" "(add \\"Bob\\")" "(add-tank \\"Bob\\")" "(run \\"Test1\\")" "(ns Tankland.TankLand)" "*ns*" "(run)" "(a-test)" "(add-tank \\"Bob\\")" "(add-tank \\"Mucho\\")" "(add-tank \\"Walla Walla\\")" "(add-tank \\"Alan\\")" "(run)" "(def t1 (add-tank \\"Sam\\"))" "t1" "(place-mine t1 100 (rand-direction))" "(move t1 (rand-direction))" "(add-tank \\"Alan\\")" "(add-tank \\"Mucho\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(run)" "(place-mine t1 (rand-direction))" "(place-mine t1 10 (rand-direction))" "(add-tank \\"Alan\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(place-mine t1 (rand-direction))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Sam\\"))" "(add-tank \\"Walla Walla\\")" "(add-tank \\"Alan\\")" "(place-mine t1 10 (rand-direction))" "(run)" "(alter board assoc [0 0] nil)" "(dosync (alter board assoc [0 0] nil))" "(add-tank \\"Alan\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(add-tank \\"Mucho\\")" "(run)" "(add-tank \\"Hi\\")" "(run)" "(add-tank \\"Hi\\")" "(run)" "(add-tank \\"Cheese\\")" "(run)" "(add-tank \\"Cheese\\")" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(add-tank \\"Hi\\")" "(place-mine t1 10 (rand-direction))" "(do-graphics @board)" "(add-tank \\"Hi\\")" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(place-mine t1 10 (rand-direction))" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(move t1 (directions \:NE))" "(move t1 \:NE)" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(add-tank \\"Hi\\")" "(run)" "(ns Tankland.core)" "(run)" "(add-tank \\"Joe\\")" "(def joe (add-tank \\"Joe\\"))" "(ns Tankland.core)" "(run)" "(add-tank \\"Go\\")" "(run)" "(add-tank \\"Joe\\")" "(place-mine (add-tank \\"Cheese\\") 100 \:NE)" "(place-mine (add-tank \\"Poe\\") 100 \:NE)" "(run)" "(def t (add-tank \\"K\\"))" "(alter board assoc [4 4] \:wall)" "(dosync (alter board assoc [4 4] \:wall))" "(run)" "(defn roaming-behavior [tank] (move tank (rand-direction)))" "(run [\\"Cheese\\" roaming-behavior])" "(run)" "(def t (add-tank \\"K\\"))" "(run)" "(add-tank \\"Calvin\\")" "(run)" "(add-tank \\"Calvin\\")" "(add-tank \\"Joe\\")" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(add-tank \\"Me\\")" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(rn)" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(add-tank \\"Joe\\")" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "\uFF08\u6DA6\uFF09" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 50)]\\n  (add-tank (str n)))" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(init-graphics)" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(do-graphics {})" "(do-graphics {} {})" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))" "(run)" "(doseq [n (range 20)]\\n  (add-tank (str n)))"]
=======
cmdhistory=["(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(run \\"hi\\")" "(add-tank \\"Joe\\")" "(add-tank \\"Bob\\")" "(add-tank \\"John\\")" "(add-tank \\"Poe\\")" "(run \\"hi\\")" "(add-tank \\"Poe\\")" "(add-tank \\"John\\")" "(add-tank \\"Joe\\")" "(add \\"Bob\\")" "(add-tank \\"Bob\\")" "(run \\"Test1\\")" "(ns Tankland.TankLand)" "*ns*" "(run)" "(a-test)" "(add-tank \\"Bob\\")" "(add-tank \\"Mucho\\")" "(add-tank \\"Walla Walla\\")" "(add-tank \\"Alan\\")" "(run)" "(def t1 (add-tank \\"Sam\\"))" "t1" "(place-mine t1 100 (rand-direction))" "(move t1 (rand-direction))" "(add-tank \\"Alan\\")" "(add-tank \\"Mucho\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(run)" "(place-mine t1 (rand-direction))" "(place-mine t1 10 (rand-direction))" "(add-tank \\"Alan\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(place-mine t1 (rand-direction))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Sam\\"))" "(add-tank \\"Walla Walla\\")" "(add-tank \\"Alan\\")" "(place-mine t1 10 (rand-direction))" "(run)" "(alter board assoc [0 0] nil)" "(dosync (alter board assoc [0 0] nil))" "(add-tank \\"Alan\\")" "(add-tank \\"Walla Walla\\")" "(def t1 (add-tank \\"Sam\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(add-tank \\"Mucho\\")" "(run)" "(add-tank \\"Hi\\")" "(run)" "(add-tank \\"Hi\\")" "(run)" "(add-tank \\"Cheese\\")" "(run)" "(add-tank \\"Cheese\\")" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(add-tank \\"Hi\\")" "(place-mine t1 10 (rand-direction))" "(do-graphics @board)" "(add-tank \\"Hi\\")" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(place-mine t1 10 (rand-direction))" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(run)" "(move t1 (directions \:NE))" "(move t1 \:NE)" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(run)" "(def t1 (add-tank \\"Cheese\\"))" "(place-mine t1 10 (rand-direction))" "(add-tank \\"Hi\\")" "(run)" "(ns Tankland.core)" "(run)" "(add-tank \\"Joe\\")" "(def joe (add-tank \\"Joe\\"))" "(ns Tankland.core)" "(run)" "(add-tank \\"Go\\")" "(run)" "(add-tank \\"Joe\\")" "(place-mine (add-tank \\"Cheese\\") 100 \:NE)" "(place-mine (add-tank \\"Poe\\") 100 \:NE)" "(run)" "(def t (add-tank \\"K\\"))" "(alter board assoc [4 4] \:wall)" "(dosync (alter board assoc [4 4] \:wall))" "(run)" "(add-tank \\"Calvin\\")" "(run)" "(add-tank \\"Calvin\\")" "(java.lang.Math/abs -4)" "(\#(identity 4) 3)" "(\#(identity 4))" "(deref-walk board)" "(add-tank \\"Ref\\")" "(run)" "(run [\\"Ref\\" (fn [tank] (move tank (rand-direction)))])" "(doseq [row (range size) col (range size)] (add-tank))" "(doseq [row (range size) col (range size)] (add-tank (str row col)))" "(add-tank \\"Nope\\")" "(run)" "(add-tank \\"Ref\\")" "(run)" "(deref-walk board)" "(run)" "(deref-walk {\:board board \:tanks tanks})" "(run)" "(def t1 (add-tank \\"Tank 1\\"))" "(def t2 (add-tank \\"Tank 2\\"))" "(fire-artillery t1 [9 1])" "(fire-artillery t1 [10 1])" "@t2" "(repair t2 5)" "(repair t2 15)" "(health t2)" "(recharge t1 8)" "(time (recharge t2 8))" "(map \:message @log-agent)" "(run)" "(def shooter (add-tank \\"Shooter\\"))" "(add-tank \\"Shot\\")" "(fire-bullet shooter \:W)" "(fire-bullet shooter \:N)" "(def tank (add-tank \\"Energy\\"))" "(energy tank)" "tank" "(def tank (add-tank \\"Energy\\"))" "(energy tank)" "tank" "(def tank (add-tank \\"Energy\\"))" "(energy tank)" "(rationalize 0.5)" "(rationalize 0.333333)" "(rationalize (java.lang.Math/sqrt 2))" "(def t (add-tank \\"Shield\\"))" "(activate-shield t 40 1/2)" "(shield t)" "(activate-shield t 40 1/2)" "(shield t)" "(activate-shield t 40 1/2)" "(shield t)" "(size {\:a \:b})" "(count {\:a \:b})" "(apply run (for [i (range 3)] [(str \\"Tank \\" i) (fn [tank] (move tank (rand-direction)) (fire-bullet tank (rand-direction)))]))" "(init-graphics)" "(do-graphics @board)" "(run)" "(apply < (map \:timestamp @log-agent))" "(dissoc-in {\:a {\:b \:c}} [\:a \:b])" "(defmacro identity-macro\\n  [body]\\n  `(identity ~body))" "(identity-macro (+ 2 3))" "(defmacro identity-macro\\n  [& body]\\n  `(identity ~@body))" "(identity-macro (+ 2 3))" "(read)" "'deref" "'clojure.core/deref" "`clojure.core/deref" "`deref" "(read)" "(macroexpand *1)" "(macroexpand (fn [] (defn f [] (+ 1 2))))" "(macroexpand-1 (fn [] (defn f [] (+ 1 2))))" "(macroexpand '(fn [] (defn f [] (+ 1 2))))" "(read-string \\"(+ 1 2 3)\\")" "~(read-string \\"(+ 1 2 3)\\")" "(eval (read-string \\"(+ 1 2 3)\\"))" "(legal-behavior? \\"(+ 1 2 3)\\")" "(legal-behavior? \\"(def six (+ 1 2 3))\\")" "(legal-behavior? \\"(move tank)\\")" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "*ns*" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "(legal-behavior? \\"(fn [tank] (deref tank))\\")" "(flatten (read-string \\"(fn [tank] (deref tank))\\"))" "(legal-behavior? \\"(fn [tank] (deref tank))\\")" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "(legal-behavior? \\"(fn [tank] @tank)\\")" "(flatten (read-string \\"(fn [tank] @tank)\\"))" "(\= 'clojure.core/deref 'deref)" "(flatten (read-string \\"(fn [tank] @tank)\\"))" "(legal-behavior? \\"(fn [tank] @tank)\\")" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "(legal-behavior? \\"(fn [tank] (get-cell [0 5]))\\")" "(let [temp (gensym)]\\n             (with-bindings {\#'*ns* (create-ns temp)} (eval \\"get-cell\\"))\\n             (remove-ns temp)\\n             true)" "(legal-behavior? \\"(fn [tank] (get-cell [0 5]))\\")" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "(refer-clojure [\:exclude 'name])" "(legal-behavior? \\"(fn [tank] (move tank))\\")" "(legal-behavior? \\"(fn [tank] (get-cell [0 5]))\\")" "(str (get (read) 2))" "(str (get (read) 1))" "(read-string \\"[] []\\")" "(read-string \\"\\")" "(load-file \\"src/Tankland/core.clj\\")" "(legal-behavior? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] (get-cell [0 5]))]\\"))" "(legal-behavior? '[\\\\\\"Name\\\\\\" (fn [tank] (get-cell [0 5]))])" "(legal-behavior? '[\\"Name\\" (fn [tank] (get-cell [0 5]))])" "(legal-tank? '[\\"Name\\" (fn [tank] (get-cell [0 5]))])" "(legal-behavior? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] (get-cell [0 5]))]\\"))" "(legal-tank? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] (get-cell [0 5]))]\\"))" "(legal-tank? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] (move tank))]\\"))" "(legal-tank? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] (deref tank))]\\"))" "(legal-tank? (read-string \\"[\\\\\\"Name\\\\\\" (fn [tank] @tank)]\\"))" "(run-from-file \\"test.tnk\\")" "(def dead (add-tank \\"Dead\\"))" "@tanks" "(deal-damage dead 100)" "(map \:message @log-agent)" "dead" "(.getWatches dead)" "(deal-damage dead 100)" "(run-from-file \\"test.tnk\\")" "(run)" "(def shielder (add-tank \\"Shielder\\"))" "(activate-shield shielder 40 1/2) (do-graphics @board)" "(do-graphics @board)" "(def info (add-tank \\"Info\\"))" "(get-information info)" "(store-information info \:in \:fo)" "(get-information info)" "(delete-information info \:in)" "(get-information info)" "(health (add-tank \\"Healthy\\"))"]
>>>>>>> refs/remotes/origin/calvin-merge-this
eclipse.preferences.version=1
